Object subclass: #JobDescription	instanceVariableNames: 'effort priority description'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!JobDescription commentStamp: 'Casco 8/11/2018 13:50' prior: 0!I describe a job to be done. I cannot be called Job (altough that is a better name) becasue a class with that name already exists in Smalltalk.!!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!effort	^ effort! !!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!effort: anObject	effort := anObject! !!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!priority: anObject	priority := anObject! !!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!priority	^ priority! !!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!description: anObject	description := anObject! !!JobDescription methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!description	^ description! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JobDescription class	instanceVariableNames: ''!!JobDescription class methodsFor: 'instance creation' stamp: 'JulianCasaburi 12/9/2019 17:55'!newWithDescription: aDescription priority: aPriority effort: anEffort	^ self new		description: aDescription;		priority: aPriority;		effort: anEffort;		yourself.! !Object subclass: #JobScheduler	instanceVariableNames: 'jobs'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!JobScheduler commentStamp: 'Casco 8/11/2018 13:50' prior: 0!I schedule jobs.I know that I am badly designed!!!!JobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:45'!next	| nextJob |	nextJob := self nextJob.	jobs remove: nextJob.	^nextJob		! !!JobScheduler methodsFor: 'accessing' stamp: 'casco 9/7/2018 19:10:49'!jobs	^ jobs! !!JobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:48'!nextJob		^ self subclassResponsibility ! !!JobScheduler methodsFor: 'initialize' stamp: 'casco 9/7/2018 19:10:49'!initialize   jobs := OrderedCollection new. ! !!JobScheduler methodsFor: 'scheduling' stamp: 'casco 9/7/2018 19:10:49'!unschedule: job	jobs remove: job! !!JobScheduler methodsFor: 'scheduling' stamp: 'casco 9/7/2018 19:10:49'!schedule: job	jobs add: job! !JobScheduler subclass: #FIFOJobScheduler	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!FIFOJobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:46'!nextJob	^ self jobs first.! !TestCase subclass: #JobSchedulerTest	instanceVariableNames: 'firstJob highestPriorityJob mostEffortJob lastJob'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!JobSchedulerTest commentStamp: 'Casco 8/11/2018 13:15' prior: 0!I test JobScheduler!!JobSchedulerTest methodsFor: 'running' stamp: 'JulianCasaburi 12/9/2019 17:44'!setUp	self initializeJobs.! !!JobSchedulerTest methodsFor: 'private' stamp: 'JulianCasaburi 12/9/2019 17:44'!initializeJobs	firstJob := JobDescription  new.	firstJob		priority: 1;		description: 'Este es el primero';		effort: 1.	highestPriorityJob := JobDescription new.	highestPriorityJob		priority: 100;		description: 'Este es el de mas prioridad';		effort: 1.	mostEffortJob := JobDescription new.	mostEffortJob		priority: 1;		description: 'Este es el de mas prioridad';		effort: 100.	lastJob := JobDescription new.	lastJob		priority: 1;		description: 'Este es el de mas prioridad';		effort: 1! !!JobSchedulerTest methodsFor: 'private' stamp: 'casco 9/7/2018 19:10:49'!scheduleJobsIn: aScheduler	aScheduler		schedule: firstJob;		schedule: highestPriorityJob;		schedule: mostEffortJob;		schedule: lastJob! !!JobSchedulerTest methodsFor: 'testing' stamp: 'casco 9/7/2018 19:10:49'!testSchedule	| scheduler |	scheduler := JobScheduler new.	scheduler schedule: highestPriorityJob.	self assert: (scheduler jobs includes: highestPriorityJob )! !!JobSchedulerTest methodsFor: 'testing' stamp: 'casco 9/7/2018 19:10:49'!testUnschedule	| scheduler |	scheduler := JobScheduler new.	self scheduleJobsIn: scheduler.	scheduler unschedule: highestPriorityJob.	self deny: (scheduler jobs includes: highestPriorityJob)! !!JobSchedulerTest methodsFor: 'tests' stamp: 'JulianCasaburi 9/21/2018 22:47'!testNext	| scheduler |	scheduler := FIFOJobScheduler new.	"scheduler strategy: 'FIFO'."	self scheduleJobsIn: scheduler.	self assert: scheduler next == firstJob.	self assert: scheduler jobs size == 3.		scheduler := LIFOJobScheduler new.	"scheduler strategy: 'LIFO'."	self scheduleJobsIn: scheduler.	self assert: scheduler next == lastJob.	self assert: scheduler jobs size == 3.		scheduler := PriorityJobScheduler new.	"scheduler strategy: 'Priority'."	self scheduleJobsIn: scheduler.	self assert: scheduler next == highestPriorityJob.	self assert: scheduler jobs size == 3.			scheduler := MostEffortFirstJobScheduler new.	"scheduler strategy: 'MostEffortFirst'."	self scheduleJobsIn: scheduler.	self assert: scheduler next == mostEffortJob.	self assert: scheduler jobs size == 3! !JobScheduler subclass: #LIFOJobScheduler	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!LIFOJobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:47'!nextJob	^ self jobs last.! !JobScheduler subclass: #MostEffortFirstJobScheduler	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!MostEffortFirstJobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:47'!nextJob	| sortedJobs |	sortedJobs := self jobs asSortedCollection: [ :a :b | a effort > b effort ].	^ sortedJobs removeFirst.! !JobScheduler subclass: #PriorityJobScheduler	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-JobSchedulerToRefactor'!!PriorityJobScheduler methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:48'!nextJob	| sortedJobs |	sortedJobs := self jobs asSortedCollection: [ :a :b | a priority > b priority ].	^ sortedJobs removeFirst.! !