TestCase subclass: #CajaDeAhorroTest	instanceVariableNames: 'unaCaja otraCaja'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-CuentaConGanchos-Testing'!!CajaDeAhorroTest methodsFor: 'running' stamp: 'JulianCasaburi 9/20/2018 22:35'!setUp	unaCaja := CajaDeAhorro new.	otraCaja := CajaDeAhorro new! !!CajaDeAhorroTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testDepositar	self assert: unaCaja saldo equals: 0.	unaCaja depositar: 100.	self assert: unaCaja saldo equals: 98! !!CajaDeAhorroTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testTransferir	unaCaja depositar: 100.	self assert: unaCaja saldo equals: 98.	self deny: (unaCaja transferir: 98 a: otraCaja).	self assert: unaCaja saldo equals: 98.	self assert: otraCaja saldo equals: 0.	self assert: (unaCaja transferir: 50 a: otraCaja).	self assert: unaCaja saldo equals: 47.	self assert: otraCaja saldo equals: 49! !!CajaDeAhorroTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testExtraer	self assert: unaCaja saldo equals: 0.	self deny: (unaCaja extraer: 100).	self assert: unaCaja saldo equals: 0.	unaCaja depositar: 100.	self deny: (unaCaja extraer: 98).	self assert: unaCaja saldo equals: 98.	self assert: (unaCaja extraer: 50).	self assert: unaCaja saldo equals: 47! !!CajaDeAhorroTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testConstructor	self assert: unaCaja saldo equals: 0! !TestCase subclass: #CuentaCorrienteTest	instanceVariableNames: 'unaCuenta otraCuenta'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-CuentaConGanchos-Testing'!!CuentaCorrienteTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testDepositar	unaCuenta depositar: 100.	self assert: unaCuenta saldo equals: 100! !!CuentaCorrienteTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testTransferir	self deny: (unaCuenta transferir: 1 a: otraCuenta).	unaCuenta depositar: 100.	self assert: (unaCuenta transferir: 100 a: otraCuenta).	self assert: unaCuenta saldo equals: 0.	self assert: otraCuenta saldo equals: 100.	unaCuenta limiteDescubierto: 10.	self assert: (unaCuenta transferir: 10 a: otraCuenta).	self assert: unaCuenta saldo equals: -10.	self assert: otraCuenta saldo equals: 110! !!CuentaCorrienteTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testExtraer	self deny: (unaCuenta extraer: 1).	unaCuenta depositar: 100.	self assert: (unaCuenta extraer: 100).	self assert: unaCuenta saldo equals: 0.	unaCuenta limiteDescubierto: 10.	self assert: (unaCuenta extraer: 10).	self assert: unaCuenta saldo equals: -10! !!CuentaCorrienteTest methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!testConstructor	self assert: unaCuenta saldo equals: 0.	self assert: unaCuenta limiteDescubierto equals: 0! !!CuentaCorrienteTest methodsFor: 'running' stamp: 'JulianCasaburi 9/20/2018 22:35'!setUp	unaCuenta := CuentaCorriente new.	otraCuenta := CuentaCorriente new! !Object subclass: #Cuenta	instanceVariableNames: 'saldo'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-CuentaConGanchos-Model'!!Cuenta commentStamp: 'Casco 8/19/2018 20:16' prior: 0!Cuenta (una clase abstracta que deja claro a sus subclases como hacer transferencias)Defino varios métodos que dependen de comportamiento que deben implementar mis subclases. !!Cuenta methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!puedeExtraer: monto  self subclassResponsibility ! !!Cuenta methodsFor: 'accessing' stamp: 'JulianCasaburi 9/20/2018 22:35'!saldo	^ saldo! !!Cuenta methodsFor: 'protected' stamp: 'JulianCasaburi 9/20/2018 22:35'!extraerSinControlar: monto  saldo := saldo - monto! !!Cuenta methodsFor: 'operations' stamp: 'JulianCasaburi 9/20/2018 22:35'!transferir: monto a: cuentaDestino	(self puedeExtraer: monto)		ifTrue: [ self extraer: monto.			cuentaDestino depositar: monto.			^ true ].	^ false! !!Cuenta methodsFor: 'operations' stamp: 'JulianCasaburi 9/20/2018 22:35'!depositar: monto	saldo := saldo + monto! !!Cuenta methodsFor: 'operations' stamp: 'JulianCasaburi 9/20/2018 22:35'!extraer: monto	(self puedeExtraer: monto)		ifTrue: [ self extraerSinControlar: monto.			^ true ].	^ false! !!Cuenta methodsFor: 'initialize' stamp: 'JulianCasaburi 9/20/2018 22:35'!initialize	saldo := 0! !Cuenta subclass: #CajaDeAhorro	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-CuentaConGanchos-Model'!!CajaDeAhorro commentStamp: 'Casco 8/19/2018 16:20' prior: 0!Una simple caja de ahorro. Las cajas de ahorro solo pueden extraer y transferir cuando cuentan con fondos suficientes. Tanto las extracciones como los depósitos en cajas de ahorro tienen un costo adicional de 2% del monto en cuestión (tengalo en cuenta antes de permitir una extracción).!!CajaDeAhorro methodsFor: 'operations' stamp: 'JulianCasaburi 9/20/2018 22:35'!depositar: monto	super depositar: monto * 0.98! !!CajaDeAhorro methodsFor: 'operations' stamp: 'JulianCasaburi 9/20/2018 22:35'!extraerSinControlar: monto	super extraerSinControlar: monto * 1.02! !!CajaDeAhorro methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!puedeExtraer: monto	^ saldo >= (monto * 1.02)! !Cuenta subclass: #CuentaCorriente	instanceVariableNames: 'limiteDescubierto'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-CuentaConGanchos-Model'!!CuentaCorriente commentStamp: 'Casco 8/19/2018 16:20' prior: 0!Una simple cuenta corrienteLas cuentas corrientes pueden extraer aún cuando el saldo de la cuenta es insuficiente. Sin embargo no deben superar cierto límite por debajo del saldo. Dicho límite se conoce como límite de descubierto (algo así como el máximo saldo negativo permitido). Ese límite es diferente para cada cuenta (lo negocia el cliente con la gente del banco). !!CuentaCorriente methodsFor: 'accessing' stamp: 'JulianCasaburi 9/20/2018 22:35'!limiteDescubierto	^ limiteDescubierto! !!CuentaCorriente methodsFor: 'accessing' stamp: 'JulianCasaburi 9/20/2018 22:35'!limiteDescubierto: anObject	limiteDescubierto := anObject! !!CuentaCorriente methodsFor: 'testing' stamp: 'JulianCasaburi 9/20/2018 22:35'!puedeExtraer: monto	^ saldo + limiteDescubierto >= monto! !!CuentaCorriente methodsFor: 'initialize' stamp: 'JulianCasaburi 9/20/2018 22:35'!initialize	super initialize.	limiteDescubierto := 0! !