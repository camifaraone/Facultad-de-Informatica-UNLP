Object subclass: #FilteredSet	instanceVariableNames: 'condition set'	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-FilteredSet'!!FilteredSet methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:33'!set	^set! !!FilteredSet methodsFor: 'accessing' stamp: 'JulianCasaburi 12/9/2019 17:29'!condition: aBlock	condition := aBlock.! !!FilteredSet methodsFor: 'adding' stamp: 'JulianCasaburi 9/9/2018 23:42'!add: anObject	"comment stating purpose of message"	(condition value: anObject)		ifTrue: [ set add: anObject ]! !!FilteredSet methodsFor: 'initialization' stamp: 'JulianCasaburi 12/9/2019 17:28'!initialize	set := Set new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FilteredSet class	instanceVariableNames: ''!!FilteredSet class methodsFor: 'instance creation' stamp: 'JulianCasaburi 12/9/2019 17:33'!newWithCondition: aBlockClosure	^ self new		condition: aBlockClosure;		yourself! !TestCase subclass: #FilteredSetTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Objetos1-FilteredSet'!!FilteredSetTest methodsFor: 'tests' stamp: 'JulianCasaburi 12/9/2019 17:35'!test	"comment stating purpose of message"	| condition filteredSet1|		condition := [:elem | elem value > 20].		filteredSet1 := FilteredSet newWithCondition: condition.		self assert: filteredSet1 set isEmpty.		filteredSet1 add: 10.		self assert: filteredSet1 set isEmpty.		filteredSet1 add: 21.		self deny: filteredSet1 set isEmpty.	! !