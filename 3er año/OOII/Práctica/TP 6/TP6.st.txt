TestCase subclass: #AnswerTest	instanceVariableNames: 'answerWithoutVotes'	classVariableNames: ''	package: 'TP7-tests'!!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 6/2/2020 17:37'!testPositiveVotes	self assert: (answerWithoutVotes positiveVotes isEmpty ).		answerWithoutVotes addVote: (Vote user: (User new) dislikesPublication: answerWithoutVotes).	self assert: (answerWithoutVotes positiveVotes isEmpty ).		answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 1.		answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 2.		answerWithoutVotes addVote: (Vote user: (User new) dislikesPublication: answerWithoutVotes).	self assert: (answerWithoutVotes positiveVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:52'!testVotesForNewAnswer	self assert: (answerWithoutVotes  negativeVotes size) equals: 0.	self assert: (answerWithoutVotes positiveVotes size) equals: 0.! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:50'!testNegativeVotes	answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 1.		answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:52'!testPositiveAndNegativeVotesInterference		answerWithoutVotes  addVote: (Vote user: (User new) dislikesPublication: answerWithoutVotes).	self assert: (answerWithoutVotes positiveVotes size) equals: 0.		answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 1.		answerWithoutVotes addVote: (Vote user: (User new) likesPublication: answerWithoutVotes).		self assert: (answerWithoutVotes positiveVotes size) equals: 2.		answerWithoutVotes addVote: (Vote user: (User new) dislikesPublication: answerWithoutVotes).	self assert: (answerWithoutVotes positiveVotes size) equals: 2.		self assert: answerWithoutVotes votes size equals: 4.! !!AnswerTest methodsFor: 'setup' stamp: 'Anonymous 6/2/2020 16:17'!setUp	answerWithoutVotes := Answer new:'An answer'  user:(User new).! !TestCase subclass: #QuestionTest	instanceVariableNames: 'questionWithoutVotes'	classVariableNames: ''	package: 'TP7-tests'!!QuestionTest methodsFor: 'set up' stamp: 'Anonymous 6/7/2020 18:53'!setUp	questionWithoutVotes := Question		newWithTitle: 'A question'		description: 'A description'		user: (User new).! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:54'!testPositiveVotes	questionWithoutVotes  addVote: (Vote user: (User new) likesPublication: questionWithoutVotes).		self assert: (questionWithoutVotes positiveVotes size) equals: 1.		questionWithoutVotes addVote: (Vote user: (User new) likesPublication: questionWithoutVotes).		self assert: (questionWithoutVotes positiveVotes size) equals: 2.	! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:54'!testVotesForNewQuestion	self assert: (questionWithoutVotes negativeVotes size) equals: 0.	self assert: (questionWithoutVotes positiveVotes size) equals: 0.! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:53'!testNegativeVotes	questionWithoutVotes addVote: (Vote user: (User new) dislikesPublication: questionWithoutVotes ).	self assert: (questionWithoutVotes negativeVotes size) equals: 1.		questionWithoutVotes addVote: (Vote user: (User new) dislikesPublication: questionWithoutVotes).	self assert: (questionWithoutVotes negativeVotes size) equals: 2.! !!QuestionTest methodsFor: 'testing' stamp: 'Anonymous 6/7/2020 18:55'!testPositiveAndNegativeVotesInterference		questionWithoutVotes  addVote: (Vote user: (User new) dislikesPublication: questionWithoutVotes).	self assert: (questionWithoutVotes positiveVotes size) equals: 0.	self assert: (questionWithoutVotes negativeVotes size) equals: 1.		questionWithoutVotes addVote: (Vote user: (User new) likesPublication: questionWithoutVotes).		self assert: (questionWithoutVotes positiveVotes size) equals: 1.	self assert: (questionWithoutVotes negativeVotes size) equals: 1.		self assert: questionWithoutVotes votes size equals: 2.! !TestCase subclass: #UserTest	instanceVariableNames: 'cuoora user1 user2 user3 topicOO1 topicOO2 questionUser1TopicOO1 questionUser3TopicOO2 questionUser2TopicOO1 question2User2TopicOO1 question3User2TopicOO1'	classVariableNames: ''	package: 'TP7-tests'!!UserTest methodsFor: 'set up' stamp: 'DiegoTowers 6/11/2019 09:41'!setUp	user1 := User username: 'Diego' password: ''.	user2 := User username: 'Sergio' password: ''.	user3 := User username: 'Leandro' password: ''.	user1 follow: user2; follow: user3.		topicOO1 := Topic name: 'OO1' description: 'This topic is for discussing about OO1 issues'.	topicOO2 := Topic name: 'OO2' description: 'This topic is for discussing about OO2 issues'.		user1 addTopic: topicOO1.	user2 addTopic: topicOO2.	user3 addTopic: topicOO2.	cuoora := CuOOra new.	cuoora addUser: user1; addUser: user2; addUser: user3.		questionUser1TopicOO1 := Question newWithTitle: 'How to create a class in Pharo' description: '' user: user1 topic: topicOO1.	questionUser1TopicOO1 addVote: 	(Vote user: user2 dislikesPublication: questionUser1TopicOO1).			questionUser3TopicOO2 := Question newWithTitle: 'How to create a WAComponent for...' description: '' user: user3 topic: topicOO2.	questionUser3TopicOO2 addVote: (Vote user: user1 dislikesPublication:questionUser3TopicOO2).	questionUser3TopicOO2 addVote: (Vote user: user2 likesPublication: questionUser3TopicOO2).		questionUser2TopicOO1 := Question newWithTitle: 'How to create a subclass in Pharo' description: '' user: user2 topic: topicOO1.	questionUser2TopicOO1 addVote: (Vote user: user1 dislikesPublication:questionUser2TopicOO1).		question2User2TopicOO1 := Question newWithTitle: 'How to modify a method in Pharo' description: '' user: user2 topic: topicOO1.	question2User2TopicOO1 addVote: (Vote user: user1 dislikesPublication:question2User2TopicOO1).	question2User2TopicOO1 addVote: (Vote user: user3 dislikesPublication:question2User2TopicOO1).	question3User2TopicOO1 := Question newWithTitle: 'How to modify a method in Pharo' description: '' user: user2 topic: topicOO1.	question3User2TopicOO1 addVote: (Vote user: user3 likesPublication:question3User2TopicOO1).	cuoora addQuestion: questionUser1TopicOO1 forUser:user1.	cuoora addQuestion: questionUser3TopicOO2 forUser:user3.	cuoora addQuestion: questionUser2TopicOO1 forUser:user2.	cuoora addQuestion: question2User2TopicOO1 forUser:user2.	cuoora addQuestion: question3User2TopicOO1 forUser:user3.	! !!UserTest methodsFor: 'testing' stamp: 'Anonymous 6/2/2020 16:48'!testTopicsRetrieveQuestions	| questionUser2TopicOO2 |		user1 defineInterestInTopics.	user2 defineInterestInTopics.	user3 defineInterestInTopics.		self assert:(user1 questionsOfInterest ) size equals: 3.	self assert: (user2 questionsOfInterest) size equals: 1.	self assert: (user3 questionsOfInterest) size equals: 0.		questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser:user2.		self assert: (user2 questionsOfInterest) size equals: 1.	self assert: (user3 questionsOfInterest) size equals: 1.	self assert: (user3 questionsOfInterest) first equals: questionUser2TopicOO2.		self assert: (user1 questionsOfInterest) size equals: 3.			! !!UserTest methodsFor: 'testing' stamp: 'Anonymous 6/2/2020 10:29'!testNegativeTopicsRetrieveQuestions	| questionUser2TopicOO2 |	user1 defineInterestInNegativeTopics.	user2 defineInterestInNegativeTopics.	user3 defineInterestInNegativeTopics.	self assert: user1 questionsOfInterest size equals: 3.	self assert: user2 questionsOfInterest size equals: 1.	self assert: user3 questionsOfInterest size equals: 0.	questionUser2TopicOO2 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser: user2.	self assert: user2 questionsOfInterest size equals: 1.	self assert: user3 questionsOfInterest size equals: 1.	self		assert: user3 questionsOfInterest first		equals: questionUser2TopicOO2.	self assert: user1 questionsOfInterest size equals: 3! !!UserTest methodsFor: 'testing' stamp: 'Anonymous 6/2/2020 10:36'!testSocialRetrieveQuestions	| questionUser2TopicOO2 |		self assert: (user1 questionsOfInterest ) size equals: 4.	self assert: (user1 questionsOfInterest) first equals: questionUser3TopicOO2.		self assert: (user2  questionsOfInterest) size equals: 0.	self assert: (user3 questionsOfInterest) size equals: 0.		questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.	questionUser2TopicOO2 addVote: (Vote user: user2 dislikesPublication: questionUser2TopicOO2).	cuoora addQuestion: questionUser2TopicOO2 forUser:user2.		self assert: (user1 questionsOfInterest) size equals: 5.	self assert: (user1 questionsOfInterest) last equals: question2User2TopicOO1.		self assert: (user3 questionsOfInterest) size equals: 0.	self assert: (user2 questionsOfInterest) size equals: 0.				! !Object subclass: #Answer	instanceVariableNames: 'question timestamp user votes description'	classVariableNames: ''	package: 'TP7-model'!!Answer methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:28'!user: anObject	user := anObject! !!Answer methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:26'!description: anObject	description := anObject! !!Answer methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:27'!timestamp: anObject	timestamp := anObject! !!Answer methodsFor: 'private' stamp: 'Anonymous 6/2/2020 16:16'!user	^user! !!Answer methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:26'!description	^ description! !!Answer methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:27'!timestamp	^ timestamp! !!Answer methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:28'!votes	^ votes! !!Answer methodsFor: 'initialize' stamp: 'SDFirmenich 4/23/2019 11:27'!initialize	votes := OrderedCollection new.	timestamp := DateAndTime now.! !!Answer methodsFor: 'adding' stamp: 'SDFirmenich 4/23/2019 11:26'!addVote: aVote	votes add: aVote! !!Answer methodsFor: 'as yet unclassified' stamp: 'SergioFirmenich 4/22/2019 23:43'!positiveVotes	| r |	r := OrderedCollection new.	votes do:[:vote | vote isLike ifTrue:[r add: vote]].	^r! !!Answer methodsFor: 'as yet unclassified' stamp: 'SergioFirmenich 4/22/2019 23:44'!negativeVotes	| r |	r := OrderedCollection new.	votes do:[:vote | vote isLike ifFalse:[r add: vote]].	^r! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation' stamp: 'Anonymous 6/2/2020 16:17'!new: anAnswer user: aUser 	^ self new		description: anAnswer;		user: aUser;		yourself! !Object subclass: #CuOOra	instanceVariableNames: 'users topics questions'	classVariableNames: ''	package: 'TP7-model'!!CuOOra methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 23:46'!initialize	users := OrderedCollection new.	topics := OrderedCollection new.	questions := OrderedCollection new! !!CuOOra methodsFor: 'adding' stamp: 'SDFirmenich 4/25/2019 12:59'!addQuestion: aQuestion forUser: aUser	aUser addQuestion: aQuestion.	questions add: aQuestion.! !!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addUser: aUser	users add: aUser ! !!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addTopic: aTopic	topics add: aTopic ! !!CuOOra methodsFor: 'adding' stamp: 'SergioFirmenich 4/22/2019 23:47'!addQuestion: aQuestion	questions add: aQuestion! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!users	^ users! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!questions	^ questions! !!CuOOra methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 23:48'!topics	^ topics! !Object subclass: #Question	instanceVariableNames: 'title answers topics timestamp user votes description'	classVariableNames: ''	package: 'TP7-model'!!Question methodsFor: 'adding' stamp: 'SDFirmenich 4/25/2019 13:29'!addTopic: aTopic	topics add: aTopic.	aTopic addQuestion: self.! !!Question methodsFor: 'adding' stamp: 'Anonymous 6/2/2020 16:20'!addAnswer: anAnswer	answers add: anAnswer.! !!Question methodsFor: 'adding' stamp: 'SDFirmenich 4/23/2019 11:26'!addVote: aVote	votes add: aVote! !!Question methodsFor: 'as yet unclassified' stamp: 'SergioFirmenich 4/22/2019 23:43'!positiveVotes	| r |	r := OrderedCollection new.	votes do:[:vote | vote isLike ifTrue:[r add: vote]].	^r! !!Question methodsFor: 'as yet unclassified' stamp: 'SergioFirmenich 4/22/2019 23:44'!negativeVotes	| r |	r := OrderedCollection new.	votes do:[:vote | vote isLike ifFalse:[r add: vote]].	^r! !!Question methodsFor: 'initalize-release' stamp: 'SDFirmenich 4/23/2019 11:27'!initialize	answers := OrderedCollection new.	topics := OrderedCollection new.	votes := OrderedCollection new.	timestamp := DateAndTime now.! !!Question methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:28'!user: anObject	user := anObject! !!Question methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:26'!description: anObject	description := anObject! !!Question methodsFor: 'private' stamp: 'SDFirmenich 4/23/2019 11:27'!timestamp: anObject	timestamp := anObject! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:26'!description	^ description! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:27'!timestamp	^ timestamp! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 09:54'!title	^title ! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:28'!user	^ user! !!Question methodsFor: 'accessing' stamp: 'SergioFirmenich 4/23/2019 00:20'!topics	^topics ! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 09:54'!title: aTitle	title := aTitle ! !!Question methodsFor: 'accessing' stamp: 'SDFirmenich 4/23/2019 11:28'!votes	^ votes! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation' stamp: 'SDFirmenich 4/25/2019 13:06'!newWithTitle: title description: aDescription user: aUser	^ self new		title: title;		description: aDescription;		user: aUser;		yourself.! !!Question class methodsFor: 'instance creation' stamp: 'SDFirmenich 4/25/2019 13:07'!newWithTitle: title description: aDescription user: aUser topic: aTopic	^ self new		title: title;		description: aDescription;		addTopic: aTopic;		user: aUser;		yourself.! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'TP7-model'!!Topic methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 08:14'!initialize	questions := OrderedCollection new.! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!description	^ description! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!questions	^ questions! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:14'!name	^name! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!name: anObject	name := anObject! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:43'!addQuestion: aQuetion	questions add: aQuetion ! !!Topic methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:42'!description: anObject	description := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'intance creation' stamp: 'SergioFirmenich 4/22/2019 23:39'!name: aName description: aDescription	^ self new		name: aName;		description: aDescription;		yourself! !Object subclass: #User	instanceVariableNames: 'questions answers username password topics following votes option'	classVariableNames: ''	package: 'TP7-model'!!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:43'!addQuestion: aQuestion	questions add: aQuestion! !!User methodsFor: 'accessing' stamp: 'DiegoTowers 6/11/2019 09:38'!defineInterestInTopicsoption := #topics.! !!User methodsFor: 'accessing' stamp: 'DiegoTowers 6/11/2019 09:39'!defineInterestInSocialoption := #social.! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!answers	^ answers! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:18'!follow: aUser	following add: aUser ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:43'!addTopic: aTopic	topics add: aTopic ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!votes	^ votes! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!username	^ username! !!User methodsFor: 'accessing' stamp: 'Anonymous 6/8/2020 10:07'!questionsOfInterest	| temp1 temp2 temp3 temp4 |	temp1 := OrderedCollection new.	option = #social ifTrue:[			temp3 := OrderedCollection new.			self following do:[ :follow | temp3 addAll: follow questions; addAll: follow questionsOfInterest ].						temp3:= temp3 reject:[:q | q user = self].			temp2 := temp3 asSortedCollection:[ :a :b | a positiveVotes size > b positiveVotes size ].			temp1 := temp2 first: (10 min: temp2 size).		].	option = #topics ifTrue:[			temp4 := OrderedCollection new.			self topics do:[ :topic | temp4 addAll: topic questions ].			temp4 := temp4 select: [  :q | (DateAndTime now - q timestamp) asDays < 90 ].			temp4 := temp4 reject:[:q | q user = self].			temp2 := temp4 asSortedCollection:[ :a :b | a positiveVotes size > b positiveVotes size ].			temp1 := temp2 last: (10 min: temp2 size).		].		option = #negativetopics ifTrue:[			temp4 := OrderedCollection new.			self topics do:[ :topic | temp4 addAll: topic questions ].			temp4 := temp4 reject:[:q | q user = self].			temp2 := temp4 asSortedCollection:[ :a :b | a negativeVotes  size > b negativeVotes size ].			temp1 := temp2 last: (10 min: temp2 size).		].		^temp1 ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!topics	^ topics! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!questions	^ questions! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!following	^ following! !!User methodsFor: 'accessing' stamp: 'DiegoTowers 6/11/2019 09:40'!defineInterestInNegativeTopicsoption := #negativetopics.! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:43'!addAnswer: anAnswer	answers add: anAnswer ! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 08:19'!addVote: aVote	votes add: aVote! !!User methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 07:50'!password	^ password! !!User methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 07:50'!password: anObject	password := anObject! !!User methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 07:50'!username: anObject	username := anObject! !!User methodsFor: 'initialize' stamp: 'SergioFirmenich 4/23/2019 00:09'!initialize	questions := OrderedCollection new.  	answers := OrderedCollection new. 	topics := OrderedCollection new. 	following := OrderedCollection new. 	votes := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance-creation' stamp: 'DiegoTowers 6/11/2019 09:42'!username: aUsername password: aPassword	^ self new		username: aUsername;		password: aPassword;		defineInterestInSocial;		yourself! !Object subclass: #Vote	instanceVariableNames: 'isLike timstamp publication user timestamp'	classVariableNames: ''	package: 'TP7-model'!!Vote methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/2/2020 16:30'!toggle	isLike := isLike not.! !!Vote methodsFor: 'initialization - private' stamp: 'DiegoTowers 6/11/2019 08:37'!intialize: aUser value: aBoolean 	user:=aUser.	isLike:= aBoolean.	timestamp := DateAndTime now.! !!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!user	^ user! !!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!publication	^ publication! !!Vote methodsFor: 'accessing' stamp: 'SergioFirmenich 4/22/2019 14:47'!isLike	^ isLike! !!Vote methodsFor: 'initialize' stamp: 'SergioFirmenich 4/22/2019 14:45'!initialize	isLike := true.	timstamp := DateAndTime now.	! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 14:47'!user: anObject	user := anObject! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 23:37'!like	isLike := true.! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 14:50'!dislike	isLike := false.! !!Vote methodsFor: 'private' stamp: 'SergioFirmenich 4/22/2019 14:47'!publication: anObject	publication := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vote class	instanceVariableNames: ''!!Vote class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:37'!user: aUser likesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		yourself! !!Vote class methodsFor: 'instance creation' stamp: 'SergioFirmenich 4/22/2019 23:37'!user: aUser dislikesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		dislike;		yourself! !!Vote class methodsFor: 'instance creation' stamp: 'DiegoTowers 4/8/2019 19:44'!positive: aUser	^self new intialize: aUser value:true.! !!Vote class methodsFor: 'instance creation simple' stamp: 'DiegoTowers 4/8/2019 20:45'!negative: aUser 	^self new intialize: aUser value: false. ! !